<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Manifold Finance Hub</title><link>https://manifoldfinance.github.io/hub/posts/</link><description>Recent content in Blog on Manifold Finance Hub</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><atom:link href="https://manifoldfinance.github.io/hub/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>German Hyperinflation</title><link>https://manifoldfinance.github.io/hub/posts/inflation_german/</link><pubDate>Wed, 10 Nov 2021 16:04:52 -0700</pubDate><guid>https://manifoldfinance.github.io/hub/posts/inflation_german/</guid><description>Hyperinflation in the Weimar Republic # Finally, a brief word on a favorite example of advocates of private control over money issuance, the German hyperinflation of 1923, which was supposedly caused by excessive government money printing. The Reichsbank president at the time, Hjalmar Schacht, putthe record straight on the real causes of that episode in Schacht (1967). Specifically, in May 1922 the Allies insisted on granting total private control over the Reichsbank.</description></item><item><title>DAO_Corollary</title><link>https://manifoldfinance.github.io/hub/posts/dao_corollary/</link><pubDate>Wed, 10 Nov 2021 09:30:40 -0800</pubDate><guid>https://manifoldfinance.github.io/hub/posts/dao_corollary/</guid><description>DAO Corollary, For Teams # F.K.A. Amdahl&amp;rsquo;s Corollary
The most efficient way to implement a piece of software is to do it all yourself.
No time is wasted communicating (or arguing); everything that needs to be done is done by the same person, which increases their ability to maintain the software; and the code is by default way more consistent.
Turns out “more efficient” doesn’t mean “faster”. When there are more people working on the same problem, we can parallelized more at once.</description></item><item><title>Problems_Are_hard</title><link>https://manifoldfinance.github.io/hub/posts/problems_are_hard/</link><pubDate>Wed, 10 Nov 2021 09:28:13 -0800</pubDate><guid>https://manifoldfinance.github.io/hub/posts/problems_are_hard/</guid><description>All Problems Are Hard # Aren’t all problems hard?
Say a customer reports a bug, and you’ve got to fix it. You can fix it. You know you can fix it. Maybe it’ll take an hour, maybe it’ll take a day, maybe a week. But you’ll narrow it down, figure out the smallest possible increment of work you can do to remedy the problem, and then you’ll do it.</description></item><item><title>UniSwap V3</title><link>https://manifoldfinance.github.io/hub/posts/uniswapv3/</link><pubDate>Thu, 14 Oct 2021 16:30:31 -0700</pubDate><guid>https://manifoldfinance.github.io/hub/posts/uniswapv3/</guid><description>Uniswap V3</description></item><item><title>Math in Solidity</title><link>https://manifoldfinance.github.io/hub/posts/math-in-solidity/</link><pubDate>Sun, 10 Oct 2021 16:30:31 -0700</pubDate><guid>https://manifoldfinance.github.io/hub/posts/math-in-solidity/</guid><description>Solidity is an object-oriented, high-level language for implementing smart contracts. Smart contracts are programs which govern the behavior of accounts within the Ethereum state.</description></item><item><title>MEV and EIP 1559</title><link>https://manifoldfinance.github.io/hub/posts/mev_and_1559/</link><pubDate>Sun, 10 Oct 2021 16:30:31 -0700</pubDate><guid>https://manifoldfinance.github.io/hub/posts/mev_and_1559/</guid><description>MEV and 1559</description></item><item><title>(EVM) Primer</title><link>https://manifoldfinance.github.io/hub/posts/evm-lowlevel/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>https://manifoldfinance.github.io/hub/posts/evm-lowlevel/</guid><description>Data Representation in Solidity # For writers of line debuggers and other debugging-related utilities.
#
Purpose of this document # The point of this document is to explain representation of data in Solidity for the purposes of locating and decoding it; more specifically, for writing a line debugger that does such. As such, other information about the type system or data layout that aren&amp;rsquo;t necessary for that may be skipped; and where location is not entirely predictable but may be determined by other systems of the debugger, we may rely on that.</description></item><item><title/><link>https://manifoldfinance.github.io/hub/posts/2021_10_25/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://manifoldfinance.github.io/hub/posts/2021_10_25/</guid><description>2021.10.25 - Community update # New Developer and Community Hub https://manifoldfinance.github.io/hub/ Starting point and organizational checkpoint for providing updates and engaging with each other Reduce the effort to get updates and find historical updates Reduce the &amp;lsquo;mission creep&amp;rsquo; that was happening (multiple different repos for documentation, hard to keep up if casual end user) Reduce effort of formulating and providing updates Mitigating Security Issues # In the course of working with the sushi team, we caught a &amp;lsquo;supply chain attack&amp;rsquo; npm package (this was actually apart of an unclaimed bug bounty) A repository is produced here: https://github.</description></item><item><title/><link>https://manifoldfinance.github.io/hub/posts/daosclarosis/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://manifoldfinance.github.io/hub/posts/daosclarosis/</guid><description>DAOsclarosis # on the persistence of faulty models in governance # “Demosclerosis isn’t a problem you solve It’s a problem you manage.”
Jonathan Rauch, DEMOSCLEROSIS
The Silent Killer of American Government, 1994
The DAO Corollary # F.K.A. Amdahl’s Corollary
The most efficient way to implement a piece of software is to do it all yourself.
No time is wasted communicating (or arguing); everything that needs to be done is done by the same person, which increases their ability to maintain the software; and the code is by default way more consistent.</description></item><item><title/><link>https://manifoldfinance.github.io/hub/posts/promise_monad/</link><pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate><guid>https://manifoldfinance.github.io/hub/posts/promise_monad/</guid><description>async/await is just the do-notation of the Promise monad # source gist
CertSimple just wrote a blog post arguing ES2017&amp;rsquo;s async/await was the best thing to happen with JavaScript. I wholeheartedly agree.
In short, one of the (few?) good things about JavaScript used to be how well it handled asynchronous requests. This was mostly thanks to its Scheme-inherited implementation of functions and closures. That, though, was also one of its worst faults, because it led to the &amp;ldquo;callback hell&amp;rdquo;, an seemingly unavoidable pattern that made highly asynchronous JS code almost unreadable.</description></item></channel></rss>