<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Blog on Manifold Finance Hub</title><link>http://manifold.finance/hub/posts/</link><description>Recent content in Blog on Manifold Finance Hub</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 10 Oct 2021 16:30:31 -0700</lastBuildDate><atom:link href="http://manifold.finance/hub/posts/index.xml" rel="self" type="application/rss+xml"/><item><title>Math in Solidity</title><link>http://manifold.finance/hub/posts/math-in-solidity/</link><pubDate>Sun, 10 Oct 2021 16:30:31 -0700</pubDate><guid>http://manifold.finance/hub/posts/math-in-solidity/</guid><description>Solidity is an object-oriented, high-level language for implementing smart contracts. Smart contracts are programs which govern the behavior of accounts within the Ethereum state.</description></item><item><title>(EVM) Primer</title><link>http://manifold.finance/hub/posts/evm-lowlevel/</link><pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate><guid>http://manifold.finance/hub/posts/evm-lowlevel/</guid><description>Data Representation in Solidity # For writers of line debuggers and other debugging-related utilities.
#
Purpose of this document # The point of this document is to explain representation of data in Solidity for the purposes of locating and decoding it; more specifically, for writing a line debugger that does such. As such, other information about the type system or data layout that aren&amp;rsquo;t necessary for that may be skipped; and where location is not entirely predictable but may be determined by other systems of the debugger, we may rely on that.</description></item></channel></rss>