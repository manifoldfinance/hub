<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blog on Manifold Finance Hub</title>
    <link>https://manifoldfinance.github.io/hub/posts/</link>
    <description>Recent content in Blog on Manifold Finance Hub</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language><atom:link href="https://manifoldfinance.github.io/hub/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>UniSwap V3</title>
      <link>https://manifoldfinance.github.io/hub/posts/uniswapv3/</link>
      <pubDate>Thu, 14 Oct 2021 16:30:31 -0700</pubDate>
      
      <guid>https://manifoldfinance.github.io/hub/posts/uniswapv3/</guid>
      <description>Uniswap V3</description>
    </item>
    
    <item>
      <title>Math in Solidity</title>
      <link>https://manifoldfinance.github.io/hub/posts/math-in-solidity/</link>
      <pubDate>Sun, 10 Oct 2021 16:30:31 -0700</pubDate>
      
      <guid>https://manifoldfinance.github.io/hub/posts/math-in-solidity/</guid>
      <description>Solidity is an object-oriented, high-level language for implementing smart contracts. Smart contracts are programs which govern the behavior of accounts within the Ethereum state.</description>
    </item>
    
    <item>
      <title>MEV and EIP 1559</title>
      <link>https://manifoldfinance.github.io/hub/posts/mev_and_1559/</link>
      <pubDate>Sun, 10 Oct 2021 16:30:31 -0700</pubDate>
      
      <guid>https://manifoldfinance.github.io/hub/posts/mev_and_1559/</guid>
      <description>MEV and 1559</description>
    </item>
    
    <item>
      <title>(EVM) Primer</title>
      <link>https://manifoldfinance.github.io/hub/posts/evm-lowlevel/</link>
      <pubDate>Sat, 02 Oct 2021 00:00:00 +0000</pubDate>
      
      <guid>https://manifoldfinance.github.io/hub/posts/evm-lowlevel/</guid>
      <description>Data Representation in Solidity #  For writers of line debuggers and other debugging-related utilities.
 #  
Purpose of this document #  The point of this document is to explain representation of data in Solidity for the purposes of locating and decoding it; more specifically, for writing a line debugger that does such. As such, other information about the type system or data layout that aren&amp;rsquo;t necessary for that may be skipped; and where location is not entirely predictable but may be determined by other systems of the debugger, we may rely on that.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://manifoldfinance.github.io/hub/posts/2021_10_25/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://manifoldfinance.github.io/hub/posts/2021_10_25/</guid>
      <description>2021.10.25 - Community update #   New Developer and Community Hub https://manifoldfinance.github.io/hub/ Starting point and organizational checkpoint for providing updates and engaging with each other   Reduce the effort to get updates and find historical updates Reduce the &amp;lsquo;mission creep&amp;rsquo; that was happening (multiple different repos for documentation, hard to keep up if casual end user) Reduce effort of formulating and providing updates  Mitigating Security Issues #  In the course of working with the sushi team, we caught a &amp;lsquo;supply chain attack&amp;rsquo; npm package (this was actually apart of an unclaimed bug bounty) A repository is produced here: https://github.</description>
    </item>
    
    <item>
      <title></title>
      <link>https://manifoldfinance.github.io/hub/posts/promise_monad/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://manifoldfinance.github.io/hub/posts/promise_monad/</guid>
      <description>async/await is just the do-notation of the Promise monad #   source gist
 CertSimple just wrote a blog post arguing ES2017&amp;rsquo;s async/await was the best thing to happen with JavaScript. I wholeheartedly agree.
In short, one of the (few?) good things about JavaScript used to be how well it handled asynchronous requests. This was mostly thanks to its Scheme-inherited implementation of functions and closures. That, though, was also one of its worst faults, because it led to the &amp;ldquo;callback hell&amp;rdquo;, an seemingly unavoidable pattern that made highly asynchronous JS code almost unreadable.</description>
    </item>
    
  </channel>
</rss>
